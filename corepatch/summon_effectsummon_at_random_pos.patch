diff --git a/src/game/SharedDefines.h b/src/game/SharedDefines.h
index d98938c..532def8 100644
--- a/src/game/SharedDefines.h
+++ b/src/game/SharedDefines.h
@@ -1033,6 +1033,7 @@ enum Targets
     TARGET_AREAEFFECT_PARTY_AND_CLASS  = 61,
     TARGET_DUELVSPLAYER_COORDINATES    = 63,
     TARGET_BEHIND_VICTIM               = 65,                // uses in teleport behind spells, caster/target dependent from spell effect
+    TARGET_RANDOM_DEST_IN_RADIUS       = 73,                //target or caster
     TARGET_DYNAMIC_OBJECT_COORDINATES  = 76,
     TARGET_SINGLE_ENEMY                = 77,
     TARGET_SELF2                       = 87,
@@ -2371,6 +2372,7 @@ enum SummonType
     SUMMON_TYPE_POSESSED2   = 428,
     SUMMON_TYPE_GUARDIAN2   = 1161,
     SUMMON_TYPE_ELEMENTAL   = 1561,
+    SUMMON_TYPE_RANDOM_AT_RADIUS = 1362,
     SUMMON_TYPE_FORCE_OF_NATURE = 1562
 };
 
diff --git a/src/game/Spell.cpp b/src/game/Spell.cpp
index 51553ca..882c93b 100644
--- a/src/game/Spell.cpp
+++ b/src/game/Spell.cpp
@@ -540,6 +540,7 @@ void Spell::FillTargetMap()
                     SetTargetMap(i, m_spellInfo->EffectImplicitTargetB[i], tmpUnitMap);
                 }
                 break;
+            case TARGET_RANDOM_DEST_IN_RADIUS:
             case TARGET_TABLE_X_Y_Z_COORDINATES:
                 switch(m_spellInfo->EffectImplicitTargetB[i])
                 {
@@ -1723,6 +1724,18 @@ void Spell::SetTargetMap(uint32 i,uint32 cur,UnitList& TagUnitMap)
             // Set dest for targets
             m_targets.setDestination(caster->GetPositionX(), caster->GetPositionY(), caster->GetPositionZ());
         }break;
+        case TARGET_RANDOM_DEST_IN_RADIUS:
+        {
+            Unit* target = m_targets.getUnitTarget() ?  m_targets.getUnitTarget() : m_caster;
+            radius = GetSpellMaxRange(sSpellRangeStore.LookupEntry(m_spellInfo->rangeIndex));
+            if(radius == 0)
+                m_targets.setDestination(target->GetPositionX(), target->GetPositionY(), target->GetPositionZ());
+            else{
+            float px,py,pz;
+            target->GetRandomPoint(target->GetPositionX(), target->GetPositionY(), target->GetPositionZ(), radius, px, py, pz);
+            m_targets.setDestination(px, py, pz);
+            }
+        }break;
         case TARGET_ALL_FRIENDLY_UNITS_AROUND_CASTER:
             // special target order
             if (m_spellInfo->Id==64904)                     // Hymn of Hope
diff --git a/src/game/Spell.h b/src/game/Spell.h
index ad40848..647d97f 100644
--- a/src/game/Spell.h
+++ b/src/game/Spell.h
@@ -244,6 +244,7 @@ class Spell
         void EffectPickPocket(uint32 i);
         void EffectAddFarsight(uint32 i);
         void EffectSummonWild(uint32 i);
+        void EffectSummonAtRandomPoint(uint32 i);
         void EffectSummonGuardian(uint32 i);
         void EffectHealMechanical(uint32 i);
         void EffectJump(uint32 i);
diff --git a/src/game/SpellEffects.cpp b/src/game/SpellEffects.cpp
index 23020ca..f0faaf0 100644
--- a/src/game/SpellEffects.cpp
+++ b/src/game/SpellEffects.cpp
@@ -3204,6 +3204,9 @@ void Spell::EffectSummonType(uint32 i)
         case SUMMON_TYPE_UNKNOWN4:
         case SUMMON_TYPE_UNKNOWN5:
             break;
+        case SUMMON_TYPE_RANDOM_AT_RADIUS:
+            EffectSummonAtRandomPoint(i);
+        break;
         default:
             sLog.outError("EffectSummonType: Unhandled summon type %u", m_spellInfo->EffectMiscValueB[i]);
             break;
@@ -3308,6 +3311,7 @@ void Spell::EffectSummon(uint32 i)
     }
 }
 
+
 void Spell::EffectLearnSpell(uint32 i)
 {
     if(!unitTarget)
@@ -3546,6 +3550,31 @@ void Spell::EffectAddFarsight(uint32 i)
     if(m_caster->GetTypeId() == TYPEID_PLAYER)
         ((Player*)m_caster)->SetFarSightGUID(dynObj->GetGUID());
 }
+void Spell::EffectSummonAtRandomPoint(uint32 i)
+{
+    uint32 creature_entry = m_spellInfo->EffectMiscValue[i];
+    if(!creature_entry)
+        return;
+    float center_x = m_targets.m_destX;
+    float center_y = m_targets.m_destY;
+    float center_z = m_targets.m_destZ;
+    int32 amount = damage > 0 ? damage : 1;
+    float radius = GetSpellRadius(sSpellRadiusStore.LookupEntry(m_spellInfo->EffectRadiusIndex[i]));
+    float px, py, pz;
+    for(int32 i = 0;i<amount;i++)
+    {
+        if(radius == 0)
+        {
+            px = center_x;
+            py = center_y;
+            pz = center_z;
+        }else
+            m_caster->GetRandomPoint(center_x, center_y, center_z, radius, px, py, pz);
+        int32 duration = GetSpellDuration(m_spellInfo);
+        TempSummonType summonType = (duration == 0) ? TEMPSUMMON_DEAD_DESPAWN : TEMPSUMMON_TIMED_OR_DEAD_DESPAWN;
+        m_caster->SummonCreature(creature_entry, px, py, pz,0, summonType, duration);
+    }
+}
 
 void Spell::EffectSummonWild(uint32 i)
 {
diff --git a/src/game/SpellMgr.h b/src/game/SpellMgr.h
index 71c8535..786e964 100644
--- a/src/game/SpellMgr.h
+++ b/src/game/SpellMgr.h
@@ -199,6 +199,7 @@ inline bool IsPointEffectTarget( Targets target )
         case TARGET_CURRENT_ENEMY_COORDINATES:
         case TARGET_DUELVSPLAYER_COORDINATES:
         case TARGET_DYNAMIC_OBJECT_COORDINATES:
+        case TARGET_RANDOM_DEST_IN_RADIUS:
             return true;
         default:
             break;
